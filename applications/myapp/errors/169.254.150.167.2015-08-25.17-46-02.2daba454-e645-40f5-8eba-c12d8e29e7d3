(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'variable_value'"
p3
sS'layer'
p4
S'/usr/local/web2py/applications/myapp/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom temp_humi_co2 import *\nfrom tablebar_globals_modules import *\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    wtask = getTask()\n    response.flash = T("Hi everyone!")\n    return dict(message=T(\'Welcome to ChanMin\\\'s blog\'),wtask = wtask)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef project_temp_humi_co2():\n    #r_temp = reading(1)\n    #r_humi = reading(2)\n    #r_value = calc(r_temp, r_humi)\n    r_co2 = getCO2()\n    #return dict(temp = "%.7s"%(r_value[0]), humi = "%.7s"%(r_value[1]), co2 = r_co2)\n    return dict(temp = "0", humi = "0", co2 = r_co2)\n\ndef project_tablebar_setting():\n    form = SQLFORM(db.tablebar_schedules, deletable=True)\n    if form.accepts(request,session):\n        response.flash = \'Thanks! The form has been submitted.\'\n    elif form.errors:\n        response.flash = \'Please correct the error(s).\'\n    else:\n        response.flash = \'Try again - no fields can be empty.\'\n    \n    rows = db(db.tablebar_schedules.id>0).select()\n    \n    form2 = SQLFORM(db.tablebar_user_location)\n    if form2.accepts(request,session):\n        response.flash = \'Good! Your location is set.\'\n    elif form2.errors:\n        response.flash = \'Please check your location.\'\n    else:\n        response.flash = \'Enter your location.\'\n        \n    rows2 = db(db.tablebar_user_location.id>0).select()\n    \n    form3 = SQLFORM(db.tablebar_baseball)\n    if form3.accepts(request,session):\n        response.flash = \'Good! Your team is set.\'\n    elif form3.errors:\n        response.flash = \'Please check your team.\'\n    else:\n        response.flash = \'Enter your team.\'\n        \n    rows3 = db(db.tablebar_baseball.id>0).select()\n        \n    return dict(form=form, rows=rows, form2=form2, rows2=rows2, form3=form3, rows3=rows3)\n\ndef database_update_delete():\n    if request.args(0) == \'tablebar_schedules\':\n        if request.args(1) == \'update\':\n            update = db.tablebar_schedules(request.args(2))\n            form = SQLFORM(db.tablebar_schedules, update, deletable=True)\n            if form.accepts(request,session):\n                return dict(form=redirect(URL(\'myapp\',\'default\',\'project_tablebar_setting\')))\n            elif form.errors:\n                response.flash = \'Please correct the error(s).\'\n            else:\n                response.flash = \'Try again - no fields can be empty.\'\n            return dict(form=form, table=\'tablebar_schedules\', state=\'update\')\n            \n        if request.args(1) == \'delete\':\n            db(db.tablebar_schedules.id == request.args(2)).delete()\n            return dict(form=redirect(URL(\'myapp\',\'default\',\'project_tablebar_setting\')))\n    elif request.args(0) == \'tablebar_user_location\':\n        if request.args(1) == \'delete\':\n            db(db.tablebar_user_location.id == request.args(2)).delete()\n            return dict(form=redirect(URL(\'myapp\',\'default\',\'project_tablebar_setting\')))\n    elif request.args(0) == \'tablebar_baseball\':\n        if request.args(1) == \'delete\':\n            db(db.tablebar_baseball.id == request.args(2)).delete()\n            return dict(form=redirect(URL(\'myapp\',\'default\',\'project_tablebar_setting\')))\n\ndef profile():\n    return dict()\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/local/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/usr/local/web2py/applications/myapp/controllers/default.py", line 130, in <module>\n  File "/usr/local/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/usr/local/web2py/applications/myapp/controllers/default.py", line 21, in index\n    wtask = getTask()\n  File "applications/myapp/modules/tablebar_globals_modules.py", line 31, in getTask\n    g_wtask = db(db.tablebar_globals.variable_name == \'wtask\').select().first().variable_value\nAttributeError: \'NoneType\' object has no attribute \'variable_value\'\n'
p11
s.